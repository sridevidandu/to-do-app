{"version":3,"sources":["pages/listItems.js","pages/homePage.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","items","duration","easing","map","item","className","key","type","id","value","text","onChange","e","editItem","target","aria-hidden","onClick","deleteItem","HomePage","useState","formItems","setFormItems","currentListItem","setCurrentListItem","onSubmit","preventDefault","console","log","placeholder","Date","now","handleInput","filteredItems","filter","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mRA4BeA,EAzBG,SAACC,GAEf,IAAMC,EAAQD,EAAMC,MAEpB,OACI,6BACI,kBAAC,IAAD,CAAUC,SAAU,IAAKC,OAAO,eAC3BF,EAAMG,KAAI,SAAAC,GACP,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,yBAAKD,UAAU,QAEX,2BAAOE,KAAK,OAAOC,GAAIJ,EAAKE,IAAKG,MAAOL,EAAKM,KACzCC,SAAU,SAACC,GAAD,OAAOb,EAAMc,SAASD,EAAEE,OAAOL,MAAOL,EAAKE,QAGzD,0BAAMD,UAAU,gBAAgBU,cAAY,OACxCC,QAAS,kBAAMjB,EAAMkB,WAAWb,EAAKE,gBC8CtDY,MA9Df,WAAqB,IAAD,EAEkBC,mBAAS,IAF3B,mBAETC,EAFS,KAEEC,EAFF,OAG8BF,mBAAS,CACnDT,KAAM,GACNJ,IAAK,KALO,mBAGTgB,EAHS,KAGQC,EAHR,KA4ChB,OACI,yBAAKlB,UAAU,YACX,gCACI,0BAAMG,GAAG,aAAagB,SA/BlB,SAACZ,GACbA,EAAEa,iBACFC,QAAQC,IAAI,cAAeL,GACvBA,EAAgBZ,MAChBW,EAAa,GAAD,mBACLD,GADK,CAERE,OA0BI,2BACIf,KAAK,OACLqB,YAAY,aACZnB,MAAOa,EAAgBZ,KACvBC,SAAU,SAAAC,GAAC,OA5CX,SAACA,GACjBW,EAAmB,CACfb,KAAME,EAAEE,OAAOL,MACfH,IAAKuB,KAAKC,QAEdJ,QAAQC,MAuCuBI,CAAYnB,MAE/B,4BAAQL,KAAK,UAAb,UAEJ,kBAAC,EAAD,CAAWP,MAASoB,EAAWH,WA7BpB,SAACX,GACpB,IAAM0B,EAAgBZ,EAAUa,QAAO,SAAAjC,GAAK,OAAIA,EAAMM,MAAOA,KAC7De,EAAa,YACNW,KA0B8DnB,SAtBpD,SAACH,EAAMJ,GACxB,IAAMN,EAAQoB,EAAUjB,KAAI,SAAAC,GAIxB,OAHGA,EAAKE,MAAQA,IACZF,EAAKM,KAAOA,GAETN,KAEXiB,EAAarB,SC7BNkC,MAVf,WACE,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnB,OCGrBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.d39d36f5.chunk.js","sourcesContent":["import React from 'react';\nimport FlipMove from 'react-flip-move';\n\nconst ListItems = (props) => {\n\n    const items = props.items;\n\n    return (\n        <div>\n            <FlipMove duration={500} easing=\"ease-in-out\">\n                {items.map(item => {\n                    return <div className=\"list\" key={item.key}>\n                        <div className=\"item\">\n                            {/* <div>{item.key} </div> */}\n                            <input type=\"text\" id={item.key} value={item.text}\n                                onChange={(e) => props.editItem(e.target.value, item.key)\n                                }></input>\n                            {/* <div className=\"fa fa-pencil-square-o\" aria-hidden=\"true\" ></div> */}\n                            <span className=\"fa fa-trash-o\" aria-hidden=\"true\"\n                                onClick={() => props.deleteItem(item.key)}></span>\n                        </div>\n                    </div>\n                })}\n            </FlipMove>\n        </div>\n    )\n}\n\nexport default ListItems","import React, { useState } from 'react';\nimport ListItems from './listItems';\n\nfunction HomePage() {\n\n    const [formItems, setFormItems] = useState([]);\n    const [currentListItem, setCurrentListItem] = useState({\n        text: '',\n        key: ''\n    });\n\n    const handleInput = (e) => {\n        setCurrentListItem({\n            text: e.target.value,\n            key: Date.now()\n        })\n        console.log()\n    }\n\n    const onClick = (e) => {\n        e.preventDefault(); //When we click on add button, page wont refreshed. \n        console.log(\"List Item :\", currentListItem);\n        if (currentListItem.text) {\n            setFormItems([\n                ...formItems, // [{heloo}]\n                currentListItem\n            ])\n        }\n    }\n\n    const deleteFormItem = (key) => {\n        const filteredItems = formItems.filter(items => items.key!== key);\n        setFormItems([\n            ...filteredItems\n        ])\n    }\n\n    const editFormItem = (text, key) => {\n        const items = formItems.map(item => {\n            if(item.key === key){\n                item.text = text;\n            }\n            return item\n        })\n        setFormItems(items)\n    }\n\n    return (\n        <div className=\"homepage\">\n            <header>\n                <form id='to-do-form' onSubmit={onClick}>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Enter here\"\n                        value={currentListItem.text}\n                        onChange={e => handleInput(e)}\n                    />\n                    <button type=\"Submit\"> Add </button>\n                </form>\n                <ListItems items = {formItems} deleteItem = {deleteFormItem} editItem = {editFormItem}/>\n            </header>\n        </div>\n    )\n}\n\nexport default HomePage","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport HomePage from './pages/homePage';\n\nfunction App() {\n  return (\n    <>\n      <BrowserRouter>\n        <Route exact path=\"/\" component={HomePage} />\n      </BrowserRouter>\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}